import rodados.*
import dependencias.*

describe "test de dependencias" {
	const deportes = new Dependencias(cantidadDeEmpleados=45)
	const cultura = new Dependencias(cantidadDeEmpleados=31)
	const cachito = new Corsa(color = 'Rojo')
	
	
	method initialize(){
		deportes.agregarAFlota(cachito)
		deportes.agregarAFlota(new Corsa(color = 'azul'))
		deportes.agregarAFlota(new Corsa(color = 'verde') )
		deportes.agregarAFlota(new Kwid(conTanqueAdicional = true))
		deportes.agregarAFlota(new AutosEspeciales(capacidad=5, velocidad=160,peso = 1200, color='baige'))
		cultura.agregarAFlota(cachito)
		cultura.agregarAFlota(new Kwid(conTanqueAdicional = true))
		cultura.agregarAFlota(new Kwid(conTanqueAdicional=false))
		cultura.agegarAFlota(new Kwid())
		traffic.configurar(interiorPulenta, motorBataton)
		cultura.agregarAFlota(traffic)
	}
	
	test "peso total de la flota de deporte" {
		assert.equals(1300 * 3 + 1350 + 1200, deportes.pesoTotalFlota())
	}
	
	test "peso total de la flota de cultura" {
		assert.equals(1300  + 1350 * 2 + 1200 + 5500, cultura.pesoTotalFlota())
	}
	
	test "estan bien equipadas deporte" {
		assert.that(deportes.estaBienEquipada())
	}
	
	test "esta bien equipada cultura"{
		assert.notThat(cultura.estaBienEquipada())
	}
	
	test "capacidad total de deporte en color azul" {
		assert.equals(7, deportes.capacidadTotalEnColor("azul"))
	}
	
	test "capacidad total de cultura en color azul" {
		assert.equals(10, cultura.capacidadTotalEnColor("azul"))
	}
	
	test "capacidad faltante de deportes"{
		assert.equals(25,cultura.capacidadFaltante())
	}
	test "capacidad faltante de cultura"{
		assert.equals(5,cultura.capacidadFaltante())
	}

}